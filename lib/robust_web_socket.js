// Generated by CoffeeScript 1.9.1
(function() {
  var RobustWebSocket, WebSocket,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  WebSocket = require('ws');

  RobustWebSocket = (function() {
    RobustWebSocket.prototype.socket = null;

    RobustWebSocket.prototype.pingTimer = null;

    RobustWebSocket.prototype.pingInterval = null;

    RobustWebSocket.prototype.debug = false;

    function RobustWebSocket(endpoint, onOpen, onMessage, options) {
      this.endpoint = endpoint;
      this.onOpen = onOpen;
      this.onMessage = onMessage;
      if (options == null) {
        options = {};
      }
      this.restart = bind(this.restart, this);
      this.onCloseOrError = bind(this.onCloseOrError, this);
      this.onError = bind(this.onError, this);
      this.onClose = bind(this.onClose, this);
      this.ensureOpen = bind(this.ensureOpen, this);
      this.debug = options != null ? options.debug : void 0;
      this.pingInterval = (options != null ? options.pingInterval : void 0) || 6000;
      this.disablePing = options != null ? options.disablePing : void 0;
      this.start();
    }

    RobustWebSocket.prototype.start = function() {
      this.log("Opening connection to " + this.endpoint);
      this.socket = new WebSocket(this.endpoint);
      this.socket.on('open', (function(_this) {
        return function() {
          _this.log("Opened websocket to " + _this.endpoint);
          _this.onOpen(_this.socket);
          if (!_this.disablePing) {
            return _this.pingTimer = setInterval(function() {
              _this.log("=> ping (" + _this.endpoint + " " + (new Date().toISOString()) + ")");
              return _this.socket.ping();
            }, _this.pingInterval);
          }
        };
      })(this));
      this.socket.on('message', (function(_this) {
        return function(data) {
          return _this.onMessage(data);
        };
      })(this));
      this.socket.on('close', this.onClose);
      this.socket.on('error', this.onError);
      setTimeout((function(_this) {
        return function() {
          return _this.ensureOpen();
        };
      })(this), 60000);
      return this.socket.on('pong', (function(_this) {
        return function() {
          return _this.log("<= pong (" + _this.endpoint + " " + (new Date().toISOString()) + ")");
        };
      })(this));
    };

    RobustWebSocket.prototype.ensureOpen = function() {
      if (this.socket.readyState !== WebSocket.OPEN) {
        return this.onCloseOrError("Did not manage to open after 60s");
      }
    };

    RobustWebSocket.prototype.onClose = function() {
      this.log("Socket to " + this.endpoint + " closed at " + (new Date));
      return this.onCloseOrError();
    };

    RobustWebSocket.prototype.onError = function(error) {
      this.log("Socket to " + this.endpoint + " encountered an error at " + (new Date) + " (" + error + ")");
      return this.onCloseOrError();
    };

    RobustWebSocket.prototype.onCloseOrError = function() {
      clearInterval(this.pingTimer);
      this.log("Will restart socket in 60s...");
      return setTimeout((function(_this) {
        return function() {
          return _this.restart();
        };
      })(this), 60000);
    };

    RobustWebSocket.prototype.restart = function() {
      delete this.pingTimer;
      delete this.socket;
      return this.start();
    };

    RobustWebSocket.prototype.log = function(msg) {
      if (this.debug) {
        return console.log(msg);
      }
    };

    return RobustWebSocket;

  })();

  module.exports = RobustWebSocket;

}).call(this);
